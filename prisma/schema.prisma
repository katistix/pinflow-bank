datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  BankAccount BankAccount[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Currency {
  EUR
  USD
  GBP
}

model BankAccount {
  id        String   @id @default(cuid())
  userId    String
  currency  Currency
  balance   Float    @default(0)
  iban      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @default("Unnamed Account")

  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  SenderTransaction   Transaction[]      @relation("Sender")
  ReceiverTransaction Transaction[]      @relation("Receiver")
  TopUpTransaction    TopUpTransaction[]

  @@unique([userId, iban])
}

model Transaction {
  id        String   @id @default(cuid())
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sender     BankAccount @relation("Sender", fields: [senderId], references: [id])
  senderId   String
  receiver   BankAccount @relation("Receiver", fields: [receiverId], references: [id])
  receiverId String
}

model TopUpTransaction {
  id        String   @id @default(cuid())
  currency  Currency
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])
  bankAccountId String
}
